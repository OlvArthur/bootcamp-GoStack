criação da src com app, routes e server
criação do constructor em App responsavel por instanciar o servidor
configuração do nodemon e sucrase em desenvolvimento
    nodemon.json => execMap ={ "js" : "sucrase-node ...}
configuração do docker com BD
configuração ESLint, prettier & editorconfig
  yarn eslint --init
    configuração com airbnb
      apagar package-lock.json e dar yarn pra instalar as dependencias em pckage.json
  yarn add prettier eslint-config-prettier eslint-plugin-prettier -D
  yarn eslint --fix [pasta] --ext .js
  gerar .editorconfig com o botão direito na raiz do projeto
configuração sequelize e mvc
  criação da pasta config e app com database.js e controllers/models (.js) respectivamente
  criação do .sequelizerc
criação de uma migration
  yarn sequelize migration:create --name= [nome-da-migration]
criação do model do projeto, e.g. User.js
criação do index.js na pasta database responsavel por adminstrar a conexão com BD e carregar os models existentes
importtar a pasta database para o app após as configurações
escrever codigo dos controladores com class`s e metodos de checagem de usuário na criação e login
fazer o hash do usuário usando bcryptjs
  yarn add bcryptjs
  usar addHook para fazer um hash a partir da senha dada, antes de salvar os dados no BD
  usar o hash criado para fazer checagem da senha ao logar
  usar jsonwebtoken para gerar um token de login com expiração
criação do middleware de autenticação de rotas, e.g. update de senha e email
criação da função update em UserController
validação da entrada de usuário através do yup
  yarn add yup
  uso do .when e yarn.ref para validação
adição do multer para arquivo de upload de imagens 
  criação do multer.js em config para configuraçoes de resposta, nome e localização da pasta a ser usada para salvar
  criação de uma nova migration para adição da coluna avatar_id na tabela users referenciando (belongsTo) a coluna de id da tabela files 
Criação de um Controller para providers para listar apenas os usuários com essa característica
Filtragem de atributos retornados em index de providers com FindAll
Inclusão de uma url com metodo get para retornar o caminho da imagem utilizando express.static no middleware em app.js
Relacionamentos entre user_id e provider_id com coluna id de usuários com associate em models 
criação de um AppointmentController para regisdtro de novos appointments
  Login com um usário não provider e fornecimento do id de um provider no body da requisição
  checagem do id de provider e retorno do appointment creado no BD
validação da data, garantindo que sejam apenas appointments de hora em hora e em datas futuras
  yarn add date-fns@next
checar a disponibilidade de horário para criação de um appointment
